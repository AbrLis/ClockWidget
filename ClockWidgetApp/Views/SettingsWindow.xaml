<Window
    x:Class="ClockWidgetApp.SettingsWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:ClockWidgetApp"
    xmlns:helpers="clr-namespace:ClockWidgetApp.Helpers"
    xmlns:viewModels="clr-namespace:ClockWidgetApp.ViewModels"
    xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=viewModels:SettingsWindowViewModel, IsDesignTimeCreatable=True}"
    Title="{Binding Localized.SettingsWindow_Title}"
    MinHeight="300"
    Width="300"
    SizeToContent="Height"
    WindowStartupLocation="CenterScreen"
    ResizeMode="NoResize"
    WindowStyle="ToolWindow"
    Topmost="True"
    Background="White">

    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <helpers:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <helpers:StringNotEmptyToBoolConverter x:Key="StringNotEmptyToBoolConverter"/>
        <helpers:BooleanToOpacityConverter x:Key="BooleanToOpacityConverter"/>
        <!-- CollectionViewSource для сортировки длинных таймеров по Remaining -->
        <CollectionViewSource x:Key="SortedLongTimersView" Source="{Binding LongTimersVm.LongTimers}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Remaining" Direction="Ascending"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
    </Window.Resources>
    <TabControl x:Name="MainTabControl" SelectedIndex="{Binding SelectedTabIndex, Mode=TwoWay}">
        <!-- Вкладка настроек -->
        <TabItem Header="{Binding Localized.SettingsWindowCommonSettings}">
            <StackPanel Margin="10">
                <!-- Общие настройки -->
                <GroupBox Header="{Binding Localized.SettingsWindowCommonSettings}"
                          Margin="0,0,0,10">
                    <StackPanel Margin="5">
                        <!-- Язык интерфейса -->
                        <StackPanel Orientation="Horizontal"
                                Margin="0,0,0,10">
                            <TextBlock Text="{Binding Localized.LanguageLabel}"
                                    VerticalAlignment="Center"
                                    Margin="0,0,5,0"/>
                            <ComboBox Width="120"
                                      SelectedValue="{Binding Language, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      SelectedValuePath="Tag">
                                <ComboBoxItem Content="Русский"
                                        Tag="ru"/>
                                <ComboBoxItem Content="English"
                                        Tag="en"/>
                            </ComboBox>
                        </StackPanel>

                        <!-- Видимость фона -->
                        <TextBlock Text="{Binding Localized.SettingsWindowBackgroundOpacity}"
                                   Margin="0,0,0,5"/>

                        <Slider x:Name="BackgroundOpacitySlider"
                                Minimum="{Binding Source={x:Static helpers:Constants.MinWindowOpacity}}"
                                Maximum="{Binding Source={x:Static helpers:Constants.MaxWindowOpacity}}"
                                Value="{Binding BackgroundOpacity, UpdateSourceTrigger=PropertyChanged}"
                                TickFrequency="{Binding Source={x:Static helpers:Constants.OpacityStep}}"
                                IsSnapToTickEnabled="True"
                                IsMoveToPointEnabled="True"
                                ToolTip="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat=P0}"/>

                        <TextBlock x:Name="BackgroundOpacityValueText"
                                   Text="{Binding BackgroundOpacity, StringFormat=P0}"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>

                        <!-- Видимость текста -->
                        <TextBlock Text="{Binding Localized.SettingsWindowTextOpacity}"
                                   Margin="0,0,0,5"/>

                        <Slider x:Name="TextOpacitySlider"
                                Minimum="{Binding Source={x:Static helpers:Constants.MinTextOpacity}}"
                                Maximum="{Binding Source={x:Static helpers:Constants.MaxTextOpacity}}"
                                Value="{Binding TextOpacity, UpdateSourceTrigger=PropertyChanged}"
                                TickFrequency="{Binding Source={x:Static helpers:Constants.OpacityStep}}"
                                IsSnapToTickEnabled="True"
                                IsMoveToPointEnabled="True"
                                ToolTip="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat=P0}"/>

                        <TextBlock x:Name="TextOpacityValueText"
                                   Text="{Binding TextOpacity, StringFormat=P0}"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>

                        <!-- Чекбокс кукушки -->
                        <CheckBox Content="{Binding Localized.SettingsWindowCuckooEveryHour}"
                                  IsChecked="{Binding CuckooEveryHour, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,0,0,10"/>

                        <CheckBox Content="{Binding Localized.SettingsWindowHalfHourChimeEnabled}"
                                  IsChecked="{Binding HalfHourChimeEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,0,0,10"/>

                    </StackPanel>
                </GroupBox>

                <!-- Настройки аналоговых часов -->
                <GroupBox Header="{Binding Localized.SettingsWindowAnalogSettings}"
                          Margin="0,0,0,10">
                    <StackPanel Margin="5">
                        <CheckBox Content="{Binding Localized.SettingsWindowShowAnalogClock}"
                                  IsChecked="{Binding ShowAnalogClock, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,5"/>
                        <CheckBox Content="{Binding Localized.SettingsWindowAnalogClockTopmost}"
                                  IsChecked="{Binding AnalogClockTopmost, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,0,0,5"/>

                        <!-- Размер аналоговых часов -->
                        <TextBlock Text="{Binding Localized.SettingsWindowAnalogClockSize}"
                                   Margin="0,10,0,5"/>

                        <Slider x:Name="AnalogClockSizeSlider"
                                Minimum="{Binding Source={x:Static helpers:Constants.MinAnalogClockSize}}"
                                Maximum="{Binding Source={x:Static helpers:Constants.MaxAnalogClockSize}}"
                                Value="{Binding AnalogClockSize, UpdateSourceTrigger=PropertyChanged}"
                                TickFrequency="{Binding Source={x:Static helpers:Constants.AnalogClockSizeStep}}"
                                IsSnapToTickEnabled="True"
                                IsMoveToPointEnabled="True"
                                ToolTip="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat=N0}"
                                IsEnabled="{Binding ShowAnalogClock}"/>

                        <TextBlock x:Name="AnalogClockSizeValueText"
                                   Text="{Binding AnalogClockSize, StringFormat='{}{0:F0}px'}"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>
                    </StackPanel>
                </GroupBox>

                <!-- Настройки цифровых часов -->
                <GroupBox Header="{Binding Localized.SettingsWindowDigitalSettings}"
                          Margin="0,0,0,10">
                    <StackPanel Margin="5">
                        <CheckBox Content="{Binding Localized.SettingsWindowShowDigitalClock}"
                                  IsChecked="{Binding ShowDigitalClock, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,5"/>

                        <!-- Чекбокс отображения секунд -->
                        <CheckBox x:Name="ShowSecondsCheckBox"
                                  Content="{Binding Localized.SettingsWindowShowSeconds}"
                                  IsChecked="{Binding ShowSeconds, Mode=TwoWay}"
                                  Margin="0,0,0,5"/>

                        <CheckBox Content="{Binding Localized.SettingsWindowDigitalClockTopmost}"
                                  IsChecked="{Binding DigitalClockTopmost, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,0,0,5"/>

                        <!-- Размер шрифта -->
                        <TextBlock Text="{Binding Localized.SettingsWindowFontSize}"
                                   Margin="0,10,0,5"/>

                        <Slider x:Name="FontSizeSlider"
                                Minimum="{Binding Source={x:Static helpers:Constants.MinFontSize}}"
                                Maximum="{Binding Source={x:Static helpers:Constants.MaxFontSize}}"
                                Value="{Binding FontSize, UpdateSourceTrigger=PropertyChanged}"
                                TickFrequency="{Binding Source={x:Static helpers:Constants.FontSizeStep}}"
                                IsSnapToTickEnabled="True"
                                IsMoveToPointEnabled="True"
                                ToolTip="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat=N0}"
                                IsEnabled="{Binding ShowDigitalClock}"/>

                        <TextBlock x:Name="FontSizeValueText"
                                   Text="{Binding FontSize, StringFormat='{}{0:F0}px'}"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>

                    </StackPanel>
                </GroupBox>

                <!-- Кнопка закрытия и мини-кнопка логов -->
                <Grid Margin="0,10,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="41"/>
                        <!-- 36px кнопка + 5px отступ -->
                    </Grid.ColumnDefinitions>
                    <Button x:Name="CloseWidgetButton"
                            Content="{Binding Localized.SettingsWindowCloseWidgetButton}"
                            Padding="10,5"
                            Background="#FFE0E0"
                            Click="CloseWidgetButton_Click"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center"
                            Grid.Column="0"/>
                    <Button x:Name="ShowLogsButton"
                            Content="{Binding Localized.SettingsWindowLogs}"
                            Width="36"
                            Height="24"
                            FontSize="12"
                            Padding="0"
                            Background="#E0E0FF"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Click="ShowLogsButton_Click"
                            Grid.Column="1"/>
                </Grid>
            </StackPanel>
        </TabItem>
        <!-- Пустая вкладка -->
        <TabItem Header="{Binding Localized.TimersAndAlarmsTab}">
            <Grid Margin="10" x:Name="TimersAlarmsGrid">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" /> <!-- Таймеры -->
                    <RowDefinition Height="Auto" /> <!-- Separator -->
                    <RowDefinition Height="*" /> <!-- Будильники -->
                    <RowDefinition Height="Auto" /> <!-- Настройки виджета -->
                </Grid.RowDefinitions>

                <!-- === Таймеры === -->
                <GroupBox Header="{Binding Localized.TimersTitle}" Grid.Row="0" Margin="0,0,0,10">
                    <StackPanel>
                        <TextBlock Text="{Binding Localized.TimersTime}" FontWeight="SemiBold" Margin="0,0,0,4"/>
                        <!-- Поле ввода таймера с анимацией и раздельными полями -->
                        <Border Margin="0,8,0,0" Background="#FFFDE9" CornerRadius="6" Padding="6" Visibility="{Binding TimersVm.IsTimerInputVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="Border.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <TextBox Width="32" Text="{Binding TimersVm.NewTimerHours, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center" LostFocus="TimerTimeBox_LostFocus"/>
                                <TextBlock Text="{Binding Localized.TimerHours}" Margin="2,0,6,0" VerticalAlignment="Center"/>
                                <TextBox Width="32" Text="{Binding TimersVm.NewTimerMinutes, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center" LostFocus="TimerTimeBox_LostFocus"/>
                                <TextBlock Text="{Binding Localized.TimerMinutes}" Margin="2,0,6,0" VerticalAlignment="Center"/>
                                <TextBox Width="32" Text="{Binding TimersVm.NewTimerSeconds, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center" LostFocus="TimerTimeBox_LostFocus"/>
                                <TextBlock Text="{Binding Localized.TimerSeconds}" Margin="2,0,8,0" VerticalAlignment="Center"/>
                                <!-- Кнопка OK для добавления -->
                                <Button Content="OK" Command="{Binding TimersVm.AddTimerCommand}" IsEnabled="{Binding TimersVm.IsNewTimerValid}">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Visibility" Value="Visible"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding TimersVm.IsEditingTimer}" Value="True">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <!-- Кнопка OK для редактирования -->
                                <Button Content="OK" Command="{Binding TimersVm.ApplyEditTimerCommand}" IsEnabled="{Binding TimersVm.IsNewTimerValid}">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding TimersVm.IsEditingTimer}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Button Content="✖️" Command="{Binding TimersVm.CancelTimerInputCommand}" Margin="4,0,0,0"/>
                            </StackPanel>
                        </Border>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0,4,0,0" Visibility="{Binding TimersVm.IsTimerInputVisible, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                            <Button Content="+" Width="20" Height="20" ToolTip="{Binding Localized.TimersAdd}" Command="{Binding TimersVm.ShowTimerInputCommand}"/>
                        </StackPanel>
                        <!-- Список таймеров с авторазмером и скроллом при превышении 5 -->
                        <!-- MaxHeight ограничивает высоту области таймеров, чтобы при превышении 5 элементов появлялся скроллбар. Если таймеров ≤ 5 — область растёт по содержимому. -->
                        <ScrollViewer x:Name="TimersScrollViewer" VerticalScrollBarVisibility="Auto" CanContentScroll="True" MaxHeight="240">
                            <!-- MaxHeight = 5 * (высота одного таймера + отступы). Здесь 240px выбрано исходя из текущего дизайна. -->
                            <ItemsControl x:Name="TimersList" Margin="0,10,0,0" ItemsSource="{Binding TimersVm.TimerEntries}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border CornerRadius="6" BorderThickness="2" BorderBrush="#FFF9E79F" Margin="0,0,0,8">
                                            <Border.Style>
                                                <Style TargetType="Border">
                                                    <Setter Property="Background" Value="#FFFFFDE7"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                                            <Setter Property="Background" Value="#E6FFE6"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                            <Border.Triggers>
                                                <EventTrigger RoutedEvent="Border.Loaded">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>
                                            </Border.Triggers>
                                            <Grid MouseLeftButtonDown="TimerItem_MouseLeftButtonDown">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Text="{Binding DisplayTime}" FontSize="15" VerticalAlignment="Center" HorizontalAlignment="Left" ToolTip="{Binding DataContext.Localized.TimersTime, RelativeSource={RelativeSource AncestorType=Window}}" Grid.Column="0"/>
                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1">
                                                    <Button x:Name="StartButton" Content="▶️" Width="28" Height="28" Margin="4,0" Command="{Binding StartCommand}" Opacity="{Binding IsStartAvailable, Converter={StaticResource BooleanToOpacityConverter}}">
                                                        <Button.Style>
                                                            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding IsRepeatAvailable}" Value="True">
                                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Button.Style>
                                                    </Button>
                                                    <Button Content="⏸️" Width="28" Height="28" Margin="4,0" Command="{Binding StopCommand}" Opacity="{Binding IsStopAvailable, Converter={StaticResource BooleanToOpacityConverter}}"/>
                                                    <Button Content="🗑️" Width="28" Height="28" Margin="4,0" Command="{Binding DataContext.DeleteTimerCommand, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}"/>
                                                    <Button Content="🔄" Width="28" Height="28" Margin="4,0" Click="TimerResetButton_Click"/>
                                                </StackPanel>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ScrollViewer>
                        <!-- Конец блока таймеров с авторазмером и скроллом -->
                    </StackPanel>
                </GroupBox>

                <!-- === Разделитель === -->
                <Separator Grid.Row="1" Margin="0,0,0,0"/>

                <!-- === Будильники === -->
                <GroupBox Header="{Binding Localized.AlarmsTitle}" Grid.Row="2" Margin="0,10,0,10">
                    <StackPanel>
                        <TextBlock Text="{Binding Localized.AlarmsTime}" FontWeight="SemiBold" Margin="0,0,0,4"/>
                        <!-- Поле ввода будильника с анимацией и раздельными полями -->
                        <Border Margin="0,8,0,0" Background="#F0F8FF" CornerRadius="6" Padding="6" Visibility="{Binding AlarmsVm.IsAlarmInputVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="Border.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>
                            <StackPanel>
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                    <TextBox Width="32" Text="{Binding AlarmsVm.NewAlarmHours, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center" LostFocus="AlarmTimeBox_LostFocus"/>
                                    <TextBlock Text="{Binding Localized.TimerHours}" Margin="2,0,6,0" VerticalAlignment="Center"/>
                                    <TextBox Width="32" Text="{Binding AlarmsVm.NewAlarmMinutes, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center" LostFocus="AlarmTimeBox_LostFocus"/>
                                    <TextBlock Text="{Binding Localized.TimerMinutes}" Margin="2,0,6,0" VerticalAlignment="Center"/>
                                    <Button Content="OK" Command="{Binding AlarmsVm.AddAlarmCommand}" IsEnabled="{Binding AlarmsVm.IsNewAlarmValid}">
                                        <Button.Style>
                                            <Style TargetType="Button">
                                                <Setter Property="Visibility" Value="Visible"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding AlarmsVm.IsEditingAlarm}" Value="True">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                    <Button Content="OK" Command="{Binding AlarmsVm.ApplyEditAlarmCommand}" IsEnabled="{Binding AlarmsVm.IsNewAlarmValid}">
                                        <Button.Style>
                                            <Style TargetType="Button">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding AlarmsVm.IsEditingAlarm}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                    <Button Content="✖️" Command="{Binding AlarmsVm.CancelAlarmInputCommand}" Margin="4,0,0,0"/>
                                </StackPanel>
                                <!-- Уведомление о дублирующемся будильнике -->
                                <TextBlock Text="{Binding AlarmsVm.DuplicateAlarmNotification}" Foreground="OrangeRed" FontSize="12" Margin="0,4,0,0"
                                           Visibility="{Binding AlarmsVm.DuplicateAlarmNotification, Converter={StaticResource StringNotEmptyToBoolConverter}, ConverterParameter=True}"/>
                            </StackPanel>
                        </Border>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0,4,0,0" Visibility="{Binding AlarmsVm.IsAlarmInputVisible, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                            <Button Content="+" Width="20" Height="20" ToolTip="{Binding Localized.AlarmsAdd}" Command="{Binding AlarmsVm.ShowAlarmInputCommand}"/>
                        </StackPanel>
                        <!-- Список будильников с авторазмером и скроллом при превышении 5 -->
                        <!-- MaxHeight ограничивает высоту области будильников, чтобы при превышении 5 элементов появлялся скроллбар. Если будильников ≤ 5 — область растёт по содержимому. -->
                        <ScrollViewer VerticalScrollBarVisibility="Auto" CanContentScroll="True" MaxHeight="240">
                            <!-- MaxHeight = 5 * (высота одного будильника + отступы). Здесь 240px выбрано исходя из текущего дизайна. -->
                            <ItemsControl x:Name="AlarmsList" Margin="0,10,0,0" ItemsSource="{Binding AlarmsVm.Alarms}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border CornerRadius="6" BorderThickness="2" BorderBrush="#FFB3E5FC" Margin="0,0,0,8">
                                            <Border.Style>
                                                <Style TargetType="Border">
                                                    <Setter Property="Background" Value="#FFE3F2FD"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsEnabled}" Value="True">
                                                            <Setter Property="Background" Value="#E6FFE6"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                            <Border.Triggers>
                                                <EventTrigger RoutedEvent="Border.Loaded">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>
                                            </Border.Triggers>
                                            <Grid MouseLeftButtonDown="AlarmItem_MouseLeftButtonDown">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Text="{Binding AlarmTime, StringFormat='{}{0:hh\\:mm}'}" FontSize="15" VerticalAlignment="Center" HorizontalAlignment="Left" ToolTip="{Binding DataContext.Localized.AlarmsTime, RelativeSource={RelativeSource AncestorType=Window}}" Grid.Column="0"/>
                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1">
                                                    <Button x:Name="StartButton" Content="▶️" Width="28" Height="28" Margin="4,0" Command="{Binding StartCommand}" Opacity="{Binding IsStartAvailable, Converter={StaticResource BooleanToOpacityConverter}}"/>
                                                    <Button Content="⏸️" Width="28" Height="28" Margin="4,0" Command="{Binding StopCommand}" Opacity="{Binding IsStopAvailable, Converter={StaticResource BooleanToOpacityConverter}}"/>
                                                    <Button Content="🗑️" Width="28" Height="28" Margin="4,0" Command="{Binding DataContext.DeleteAlarmCommand, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}"/>
                                                </StackPanel>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ScrollViewer>
                        <!-- Конец блока будильников с авторазмером и скроллом -->
                    </StackPanel>
                </GroupBox>
                <!-- === Разделитель === -->
                <Separator Grid.Row="1" Margin="0,0,0,0"/>
                <!-- === Длинные таймеры === -->
                <GroupBox Header="{Binding Localized.LongTimersTitle}" Grid.Row="3" Margin="0,10,0,10">
                    <StackPanel>
                        <TextBlock Text="{Binding Localized.LongTimersTriggerDateTime}" FontWeight="SemiBold" Margin="0,0,0,4"/>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0,4,0,0">
                            <Button x:Name="LongTimerAddButton" Content="+" Width="20" Height="20" ToolTip="{Binding Localized.LongTimersAdd}" Click="LongTimerAddButton_Click"/>
                        </StackPanel>
                        <!-- Список длинных таймеров с авторазмером и скроллом при превышении 5 -->
                        <!-- MaxHeight ограничивает высоту области длинных таймеров, чтобы при превышении 5 элементов появлялся скроллбар. Если длинных таймеров ≤ 5 — область растёт по содержимому. -->
                        <ScrollViewer VerticalScrollBarVisibility="Auto" CanContentScroll="True" MaxHeight="240">
                            <!-- MaxHeight = 5 * (высота одного длинного таймера + отступы). Здесь 240px выбрано исходя из текущего дизайна. -->
                            <ItemsControl x:Name="LongTimersList" Margin="0,10,0,0" ItemsSource="{Binding Source={StaticResource SortedLongTimersView}}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel>
                                            <TextBlock FontWeight="Bold" FontSize="10" Margin="0,0,0,2" Text="{Binding Name}">
                                                <TextBlock.Style>
                                                    <Style TargetType="TextBlock">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Name}" Value="">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBlock.Style>
                                            </TextBlock>
                                            <Border CornerRadius="6" BorderThickness="2" BorderBrush="#A5D6A7" Margin="0,0,0,4" ToolTip="{Binding SettingsTooltip}" MouseLeftButtonDown="LongTimerItem_MouseLeftButtonDown">
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <Setter Property="Background" Value="#F1F8E9"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                                                <Setter Property="Background" Value="#E6FFE6"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <TextBlock Text="{Binding DisplayTime}" FontSize="15" VerticalAlignment="Center" HorizontalAlignment="Left" Grid.Column="0"/>
                                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1">
                                                        <Button Content="🗑️" Width="28" Height="28" Margin="4,0" Command="{Binding DataContext.DeleteLongTimerCommand, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}"/>
                                                    </StackPanel>
                                                </Grid>
                                            </Border>
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ScrollViewer>
                        <!-- Конец блока длинных таймеров с авторазмером и скроллом -->
                    </StackPanel>
                </GroupBox>
            </Grid>
        </TabItem>
    </TabControl>
</Window> 