<Window x:Class="ClockWidgetApp.SettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ClockWidgetApp"
        xmlns:helpers="clr-namespace:ClockWidgetApp.Helpers"
        xmlns:viewModels="clr-namespace:ClockWidgetApp.ViewModels"
        mc:Ignorable="d"
        Title="{Binding Localized.SettingsWindow_Title}"
        MinHeight="300"
        Width="300"
        SizeToContent="Height"
        WindowStartupLocation="CenterScreen"
        ResizeMode="NoResize"
        WindowStyle="ToolWindow"
        Topmost="True"
        Background="White">
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <viewModels:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <viewModels:StringNotEmptyToBoolConverter x:Key="StringNotEmptyToBoolConverter"/>
        <viewModels:BooleanToOpacityConverter x:Key="BooleanToOpacityConverter"/>
    </Window.Resources>
    <TabControl>
        <!-- Вкладка настроек -->
        <TabItem Header="{Binding Localized.SettingsWindow_CommonSettings}">
            <StackPanel Margin="10">
                <!-- Общие настройки -->
                <GroupBox Header="{Binding Localized.SettingsWindow_CommonSettings}"
                          Margin="0,0,0,10">
                    <StackPanel Margin="5">
                        <!-- Язык интерфейса -->
                        <StackPanel Orientation="Horizontal"
                                Margin="0,0,0,10">
                            <TextBlock Text="{Binding Localized.LanguageLabel}"
                                    VerticalAlignment="Center"
                                    Margin="0,0,5,0"/>
                            <ComboBox Width="120"
                                      SelectedValue="{Binding Language, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      SelectedValuePath="Tag">
                                <ComboBoxItem Content="Русский"
                                        Tag="ru"/>
                                <ComboBoxItem Content="English"
                                        Tag="en"/>
                            </ComboBox>
                        </StackPanel>

                        <!-- Видимость фона -->
                        <TextBlock Text="{Binding Localized.SettingsWindow_BackgroundOpacity}"
                                   Margin="0,0,0,5"/>

                        <Slider x:Name="BackgroundOpacitySlider"
                                Minimum="{Binding Source={x:Static helpers:Constants.MIN_WINDOW_OPACITY}}"
                                Maximum="{Binding Source={x:Static helpers:Constants.MAX_WINDOW_OPACITY}}"
                                Value="{Binding BackgroundOpacity, UpdateSourceTrigger=PropertyChanged}"
                                TickFrequency="{Binding Source={x:Static helpers:Constants.OPACITY_STEP}}"
                                IsSnapToTickEnabled="True"
                                IsMoveToPointEnabled="True"
                                ToolTip="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat=P0}"/>

                        <TextBlock x:Name="BackgroundOpacityValueText"
                                   Text="{Binding BackgroundOpacity, StringFormat=P0}"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>

                        <!-- Видимость текста -->
                        <TextBlock Text="{Binding Localized.SettingsWindow_TextOpacity}"
                                   Margin="0,0,0,5"/>

                        <Slider x:Name="TextOpacitySlider"
                                Minimum="{Binding Source={x:Static helpers:Constants.MIN_TEXT_OPACITY}}"
                                Maximum="{Binding Source={x:Static helpers:Constants.MAX_TEXT_OPACITY}}"
                                Value="{Binding TextOpacity, UpdateSourceTrigger=PropertyChanged}"
                                TickFrequency="{Binding Source={x:Static helpers:Constants.OPACITY_STEP}}"
                                IsSnapToTickEnabled="True"
                                IsMoveToPointEnabled="True"
                                ToolTip="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat=P0}"/>

                        <TextBlock x:Name="TextOpacityValueText"
                                   Text="{Binding TextOpacity, StringFormat=P0}"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>

                        <!-- Чекбокс кукушки -->
                        <CheckBox Content="{Binding Localized.SettingsWindow_CuckooEveryHour}"
                                  IsChecked="{Binding CuckooEveryHour, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,0,0,10"/>

                        <CheckBox Content="{Binding Localized.SettingsWindow_HalfHourChimeEnabled}"
                                  IsChecked="{Binding HalfHourChimeEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,0,0,10"/>

                    </StackPanel>
                </GroupBox>

                <!-- Настройки аналоговых часов -->
                <GroupBox Header="{Binding Localized.SettingsWindow_AnalogSettings}"
                          Margin="0,0,0,10">
                    <StackPanel Margin="5">
                        <CheckBox Content="{Binding Localized.SettingsWindow_ShowAnalogClock}"
                                  IsChecked="{Binding ShowAnalogClock, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,5"/>
                        <CheckBox Content="{Binding Localized.SettingsWindow_AnalogClockTopmost}"
                                  IsChecked="{Binding AnalogClockTopmost, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,0,0,5"/>

                        <!-- Размер аналоговых часов -->
                        <TextBlock Text="{Binding Localized.SettingsWindow_AnalogClockSize}"
                                   Margin="0,10,0,5"/>

                        <Slider x:Name="AnalogClockSizeSlider"
                                Minimum="{Binding Source={x:Static helpers:Constants.MIN_ANALOG_CLOCK_SIZE}}"
                                Maximum="{Binding Source={x:Static helpers:Constants.MAX_ANALOG_CLOCK_SIZE}}"
                                Value="{Binding AnalogClockSize, UpdateSourceTrigger=PropertyChanged}"
                                TickFrequency="{Binding Source={x:Static helpers:Constants.ANALOG_CLOCK_SIZE_STEP}}"
                                IsSnapToTickEnabled="True"
                                IsMoveToPointEnabled="True"
                                ToolTip="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat=N0}"
                                IsEnabled="{Binding ShowAnalogClock}"/>

                        <TextBlock x:Name="AnalogClockSizeValueText"
                                   Text="{Binding AnalogClockSize, StringFormat='{}{0:F0}px'}"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>
                    </StackPanel>
                </GroupBox>

                <!-- Настройки цифровых часов -->
                <GroupBox Header="{Binding Localized.SettingsWindow_DigitalSettings}"
                          Margin="0,0,0,10">
                    <StackPanel Margin="5">
                        <CheckBox Content="{Binding Localized.SettingsWindow_ShowDigitalClock}"
                                  IsChecked="{Binding ShowDigitalClock, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,5"/>

                        <!-- Чекбокс отображения секунд -->
                        <CheckBox x:Name="ShowSecondsCheckBox"
                                  Content="{Binding Localized.SettingsWindow_ShowSeconds}"
                                  IsChecked="{Binding ShowSeconds, Mode=TwoWay}"
                                  Margin="0,0,0,5"/>

                        <CheckBox Content="{Binding Localized.SettingsWindow_DigitalClockTopmost}"
                                  IsChecked="{Binding DigitalClockTopmost, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="0,0,0,5"/>

                        <!-- Размер шрифта -->
                        <TextBlock Text="{Binding Localized.SettingsWindow_FontSize}"
                                   Margin="0,10,0,5"/>

                        <Slider x:Name="FontSizeSlider"
                                Minimum="{Binding Source={x:Static helpers:Constants.MIN_FONT_SIZE}}"
                                Maximum="{Binding Source={x:Static helpers:Constants.MAX_FONT_SIZE}}"
                                Value="{Binding FontSize, UpdateSourceTrigger=PropertyChanged}"
                                TickFrequency="{Binding Source={x:Static helpers:Constants.FONT_SIZE_STEP}}"
                                IsSnapToTickEnabled="True"
                                IsMoveToPointEnabled="True"
                                ToolTip="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat=N0}"
                                IsEnabled="{Binding ShowDigitalClock}"/>

                        <TextBlock x:Name="FontSizeValueText"
                                   Text="{Binding FontSize, StringFormat='{}{0:F0}px'}"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>

                    </StackPanel>
                </GroupBox>

                <!-- Кнопка закрытия и мини-кнопка логов -->
                <Grid Margin="0,10,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="41"/>
                        <!-- 36px кнопка + 5px отступ -->
                    </Grid.ColumnDefinitions>
                    <Button x:Name="CloseWidgetButton"
                            Content="{Binding Localized.SettingsWindow_CloseWidgetButton}"
                            Padding="10,5"
                            Background="#FFE0E0"
                            Click="CloseWidgetButton_Click"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center"
                            Grid.Column="0"/>
                    <Button x:Name="ShowLogsButton"
                            Content="{Binding Localized.SettingsWindow_Logs}"
                            Width="36"
                            Height="24"
                            FontSize="12"
                            Padding="0"
                            Background="#E0E0FF"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Click="ShowLogsButton_Click"
                            Grid.Column="1"/>
                </Grid>
            </StackPanel>
        </TabItem>
        <!-- Пустая вкладка -->
        <TabItem Header="{Binding Localized.TimersAndAlarms_Tab}">
            <Grid Margin="10" x:Name="TimersAlarmsGrid">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" /> <!-- Таймеры -->
                    <RowDefinition Height="Auto" /> <!-- Separator -->
                    <RowDefinition Height="*" /> <!-- Будильники -->
                    <RowDefinition Height="Auto" /> <!-- Настройки виджета -->
                </Grid.RowDefinitions>

                <!-- === Таймеры === -->
                <GroupBox Header="{Binding Localized.Timers_Title}" Grid.Row="0" Margin="0,0,0,10">
                    <StackPanel>
                        <TextBlock Text="{Binding Localized.Timers_Time}" FontWeight="SemiBold" Margin="0,0,0,4"/>
                        <!-- Поле ввода таймера с анимацией и раздельными полями -->
                        <Border Margin="0,8,0,0" Background="#FFFDE9" CornerRadius="6" Padding="6" Visibility="{Binding IsTimerInputVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="Border.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <TextBox Width="32" Text="{Binding NewTimerHours, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center"/>
                                <TextBlock Text="{Binding Localized.Timer_Hours}" Margin="2,0,6,0" VerticalAlignment="Center"/>
                                <TextBox Width="32" Text="{Binding NewTimerMinutes, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center"/>
                                <TextBlock Text="{Binding Localized.Timer_Minutes}" Margin="2,0,6,0" VerticalAlignment="Center"/>
                                <TextBox Width="32" Text="{Binding NewTimerSeconds, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center"/>
                                <TextBlock Text="{Binding Localized.Timer_Seconds}" Margin="2,0,8,0" VerticalAlignment="Center"/>
                                <Button Content="OK" Command="{Binding AddTimerCommand}" IsEnabled="{Binding IsNewTimerValid}"/>
                                <Button Content="✖️" Command="{Binding CancelTimerInputCommand}" Margin="4,0,0,0"/>
                            </StackPanel>
                        </Border>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0,8,0,0" Visibility="{Binding IsTimerInputVisible, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                            <Button Content="+" Width="28" Height="28" ToolTip="{Binding Localized.Timers_Add}" Command="{Binding ShowTimerInputCommand}"/>
                        </StackPanel>
                        <!-- Список таймеров -->
                        <ItemsControl x:Name="TimersList" Margin="0,10,0,0" ItemsSource="{Binding Timers}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Border CornerRadius="6" BorderThickness="2" BorderBrush="#FFF9E79F" Margin="0,0,0,8" Background="#FFFFFDE7">
                                        <Border.Triggers>
                                            <EventTrigger RoutedEvent="Border.Loaded">
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger>
                                        </Border.Triggers>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Text="{Binding DisplayTime}" FontSize="15" VerticalAlignment="Center" HorizontalAlignment="Left" ToolTip="{Binding DataContext.Localized.Timers_Time, RelativeSource={RelativeSource AncestorType=Window}}" Grid.Column="0"/>
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1">
                                                <Button x:Name="StartButton" Content="▶️" Width="28" Height="28" Margin="4,0" Command="{Binding StartCommand}" Opacity="{Binding IsStartAvailable, Converter={StaticResource BooleanToOpacityConverter}}">
                                                    <Button.Style>
                                                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding IsRepeatAvailable}" Value="True">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Button x:Name="RepeatButton" Content="🔁" Width="28" Height="28" Margin="4,0" Command="{Binding RepeatCommand}" Opacity="1.0">
                                                    <Button.Style>
                                                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding IsRepeatAvailable}" Value="False">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Button Content="⏸️" Width="28" Height="28" Margin="4,0" Command="{Binding StopCommand}" Opacity="{Binding IsStopAvailable, Converter={StaticResource BooleanToOpacityConverter}}"/>
                                                <Button Content="🗑️" Width="28" Height="28" Margin="4,0" Command="{Binding DeleteCommand}"/>
                                                <Button Content="👁️" Width="28" Height="28" Margin="4,0" Command="{Binding ToggleWidgetVisibilityCommand}" Opacity="{Binding IsWidgetVisible, Converter={StaticResource BooleanToOpacityConverter}}"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </GroupBox>

                <!-- === Разделитель === -->
                <Separator Grid.Row="1" Margin="0,0,0,0"/>

                <!-- === Будильники === -->
                <GroupBox Header="{Binding Localized.Alarms_Title}" Grid.Row="2" Margin="0,10,0,10">
                    <StackPanel>
                        <TextBlock Text="{Binding Localized.Alarms_Time}" FontWeight="SemiBold" Margin="0,0,0,4"/>
                        <!-- Поле ввода будильника с анимацией и раздельными полями -->
                        <Border Margin="0,8,0,0" Background="#F0F8FF" CornerRadius="6" Padding="6" Visibility="{Binding IsAlarmInputVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="Border.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <TextBox Width="32" Text="{Binding NewAlarmHours, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center"/>
                                <TextBlock Text="{Binding Localized.Timer_Hours}" Margin="2,0,6,0" VerticalAlignment="Center"/>
                                <TextBox Width="32" Text="{Binding NewAlarmMinutes, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center"/>
                                <TextBlock Text="{Binding Localized.Timer_Minutes}" Margin="2,0,6,0" VerticalAlignment="Center"/>
                                <TextBox Width="32" Text="{Binding NewAlarmSeconds, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberOnly_PreviewTextInput" MaxLength="2" HorizontalContentAlignment="Center"/>
                                <TextBlock Text="{Binding Localized.Timer_Seconds}" Margin="2,0,8,0" VerticalAlignment="Center"/>
                                <Button Content="OK" Command="{Binding AddAlarmCommand}" IsEnabled="{Binding IsNewAlarmValid}"/>
                                <Button Content="✖️" Command="{Binding CancelAlarmInputCommand}" Margin="4,0,0,0"/>
                            </StackPanel>
                        </Border>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0,8,0,0" Visibility="{Binding IsAlarmInputVisible, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                            <Button Content="+" Width="28" Height="28" ToolTip="{Binding Localized.Alarms_Add}" Command="{Binding ShowAlarmInputCommand}"/>
                        </StackPanel>
                        <!-- Список будильников -->
                        <ItemsControl x:Name="AlarmsList" Margin="0,10,0,0" ItemsSource="{Binding Alarms}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Border CornerRadius="6" BorderThickness="2" BorderBrush="#FFB3E5FC" Margin="0,0,0,8" Background="#FFE3F2FD">
                                        <Border.Triggers>
                                            <EventTrigger RoutedEvent="Border.Loaded">
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.3"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger>
                                        </Border.Triggers>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Text="{Binding DisplayTime}" FontSize="15" VerticalAlignment="Center" HorizontalAlignment="Left" ToolTip="{Binding DataContext.Localized.Alarms_Time, RelativeSource={RelativeSource AncestorType=Window}}" Grid.Column="0"/>
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1">
                                                <Button x:Name="StartButton" Content="▶️" Width="28" Height="28" Margin="4,0" Command="{Binding StartCommand}" Opacity="{Binding IsStartAvailable, Converter={StaticResource BooleanToOpacityConverter}}">
                                                    <Button.Style>
                                                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding IsRepeatAvailable}" Value="True">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Button x:Name="RepeatButton" Content="🔁" Width="28" Height="28" Margin="4,0" Command="{Binding RepeatCommand}" Opacity="1.0">
                                                    <Button.Style>
                                                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding IsRepeatAvailable}" Value="False">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Button.Style>
                                                </Button>
                                                <Button Content="⏸️" Width="28" Height="28" Margin="4,0" Command="{Binding StopCommand}" Opacity="{Binding IsStopAvailable, Converter={StaticResource BooleanToOpacityConverter}}"/>
                                                <Button Content="🗑️" Width="28" Height="28" Margin="4,0" Command="{Binding DeleteCommand}"/>
                                                <Button Content="👁️" Width="28" Height="28" Margin="4,0" Command="{Binding ToggleWidgetVisibilityCommand}" Opacity="{Binding IsWidgetVisible, Converter={StaticResource BooleanToOpacityConverter}}"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </GroupBox>

                <!-- === Настройки виджета === -->
                <GroupBox Grid.Row="3" Header="{Binding Localized.WidgetSettings_Title}" Margin="0,0,0,0">
                    <StackPanel Margin="8">
                        <TextBlock Text="{Binding Localized.WidgetSettings_Size}" Margin="0,0,0,4"/>
                        <Slider Minimum="0.5" Maximum="2.0" Value="1.0" TickFrequency="0.1" IsSnapToTickEnabled="True" ToolTip="{Binding Localized.WidgetSettings_SizeTooltip}"/>
                        <CheckBox Content="{Binding Localized.WidgetSettings_Topmost}" Margin="0,8,0,0" ToolTip="{Binding Localized.WidgetSettings_TopmostTooltip}"/>
                    </StackPanel>
                </GroupBox>
            </Grid>
        </TabItem>
    </TabControl>
</Window> 